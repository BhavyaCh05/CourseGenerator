
--Sample code to assessment based on mcq, fill in the blanks and short answers.
@app.route('/generate_assessment', methods=['POST'])
def generate_assessment():
    file = request.files['pdf']
    text = extract_text_from_pdf(file)
    text_chunks = split_text_into_chunks(text)

    mcq_questions = []
    fill_in_the_blank_questions = []
    short_answer_questions = []

    for chunk in text_chunks:
        prompts = create_prompts(chunk)
        mcq_questions.append(generate_questions(prompts['mcq']))
        fill_in_the_blank_questions.append(generate_questions(prompts['fill_in_the_blank']))
        short_answer_questions.append(generate_questions(prompts['short_answer']))

    return jsonify({
        'mcq_questions': mcq_questions,
        'fill_in_the_blank_questions': fill_in_the_blank_questions,
        'short_answer_questions': short_answer_questions
    })

@app.route('/evaluate_assessment', methods=['POST'])
def evaluate_assessment():
    user_answers = request.json.get('user_answers')
    correct_answers = request.json.get('correct_answers')

    evaluation = {
        'mcq': {
            'total': len(correct_answers['mcq']),
            'correct': sum(1 for ua, ca in zip(user_answers['mcq'], correct_answers['mcq']) if ua == ca)
        },
        'fill_in_the_blank': {
            'total': len(correct_answers['fill_in_the_blank']),
            'correct': sum(1 for ua, ca in zip(user_answers['fill_in_the_blank'], correct_answers['fill_in_the_blank']) if ua == ca)
        },
        'short_answer': {
            'total': len(correct_answers['short_answer']),
            'correct': sum(1 for ua, ca in zip(user_answers['short_answer'], correct_answers['short_answer']) if ua.strip().lower() == ca.strip().lower())
        }
    }

    return jsonify(evaluation)

if __name__ == '__main__':
    app.run(debug=True)

---
---=-----------------
---
---






--yeh waala flask ko lekar
import React, { useState } from 'react';
import axios from 'axios';

const App = () => {
  const [file, setFile] = useState(null);
  const [mcqQuestions, setMcqQuestions] = useState([]);
  const [fillInTheBlankQuestions, setFillInTheBlankQuestions] = useState([]);
  const [shortAnswerQuestions, setShortAnswerQuestions] = useState([]);
  const [userAnswers, setUserAnswers] = useState({
    mcq: [],
    fill_in_the_blank: [],
    short_answer: []
  });
  const [evaluation, setEvaluation] = useState(null);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  const handleSubmit = async () => {
    const formData = new FormData();
    formData.append('pdf', file);

    try {
      const response = await axios.post('/generate_assessment', formData);
      setMcqQuestions(response.data.mcq_questions);
      setFillInTheBlankQuestions(response.data.fill_in_the_blank_questions);
      setShortAnswerQuestions(response.data.short_answer_questions);
    } catch (error) {
      console.error('Error generating assessment:', error);
    }
  };

  const handleAnswerChange = (type, index, value) => {
    setUserAnswers(prev => {
      const newAnswers = { ...prev };
      newAnswers[type][index] = value;
      return newAnswers;
    });
  };

  const handleEvaluation = async () => {
    try {
      const response = await axios.post('/evaluate_assessment', {
        user_answers: userAnswers,
        correct_answers: {
          mcq: mcqQuestions.map(q => q.correct_answer),
          fill_in_the_blank: fillInTheBlankQuestions.map(q => q.correct_answer),
          short_answer: shortAnswerQuestions.map(q => q.correct_answer)
        }
      });
      setEvaluation(response.data);
    } catch (error) {
      console.error('Error evaluating assessment:', error);
    }
  };

  return (
    <div>
      <h1>AI Course Generator</h1>
      <input type="file" onChange={handleFileChange} />
      <button onClick={handleSubmit}>Generate Assessment</button>
      
      <h2>MCQ Questions</h2>
      {mcqQuestions.map((question, index) => (
        <div key={index}>
          <p>{question.question}</p>
          {question.options.map((option, i) => (
            <div key={i}>
              <input 
                type="radio" 
                name={`mcq-${index}`} 
                value={option} 
                onChange={(e) => handleAnswerChange('mcq', index, e.target.value)}
              />
              <label>{option}</label>
            </div>
          ))}
        </div>
      ))}

      <h2>Fill in the Blank Questions</h2>
      {fillInTheBlankQuestions.map((question, index) => (
        <div key={index}>
          <p>{question.question}</p>
          <input 
            type="text" 
            onChange={(e) => handleAnswerChange('fill_in_the_blank', index, e.target.value)} 
          />
        </div>
      ))}

      <h2>Short Answer Questions</h2>
      {shortAnswerQuestions.map((question, index) => (
        <div key={index}>
          <p>{question.question}</p>
          <textarea 
            onChange={(e) => handleAnswerChange('short_answer', index, e.target.value)}
          />
        </div>
      ))}

      <button onClick={handleEvaluation}>Submit Answers</button>

      {evaluation && (
        <div>
          <h2>Evaluation</h2>
          <p>MCQ: {evaluation.mcq.correct} / {evaluation.mcq.total
 
























